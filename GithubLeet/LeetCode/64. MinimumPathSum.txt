 
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes 
the sum of all numbers along its path.


public int minPathSum(int[][] grid)
    {
        if(grid.length == 0)
            return 0;
        //make the grid
        //  i j                            //lngth of 1st row of grid
        int[][] minPath = new int[grid.length][grid[0].length];
        // i is column j is row
        for(int i = 0; i<minPath.length; i++)
        {   
            for(int j =0 ; j<minPath[i].length; j++)
            {
                minPath[i][j] += grid[i][j];
                // 2 ways it can come from, down or right
                //make sure your not in the zero column or zero row
                if(i >0 && j>0)
                {
                minPath[i][j] += Math.min(minPath[i-1][j], minPath[i][j-1]);
                }
                else if(i>0)
                {
                    minPath[i][j] += minPath[i-1][j];
                }
                else if(j>0)
                {
                    minPath[i][j] += minPath[i][j-1];
                }                
                
            }
        }
        //run time 0(n*m), space complexity is n*m
        return minPath[minPath.length-1][minPath[0].length-1];
    }