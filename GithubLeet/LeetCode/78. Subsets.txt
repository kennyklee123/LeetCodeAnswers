
Given a set of distinct integers, nums, return all possible subsets (the power set).

class Solution {
    public List<List<Integer>> subsets(int[] nums) 
    {
        List<List<Integer>> subsets = new ArrayList<>();
        //starts at 0, the first number
        // needs the numbers to know what numbers can be in the subsets
        //add in subsets, so you can add to the the list
        generateSubset(0,nums, new ArrayList<Integer>(), subsets);
            
        return subsets;
    }
    //makes a list of lists to return called subsets
    //calls magical recursive function to create the subsets and them all up
    //in recrusive function, we add to our list of subsets whatever our current subset is
    //then walk through the rest of the numbers from the ith
    //then removes once the subset returns
    //2^n complexity
    public void generateSubset(int index, int[] nums, List<Integer> current, List<List<Integer>> subsets  )
    {
        //adds a copy of current and adds it because we will be modifying current
        subsets.add(new ArrayList<>(current));
        //index is where we are at nums array
        //how to simulate taking and not taking numbers from nums
        for(int i = index; i <nums.length;i++)
        {
            //this takes a number 
            current.add(nums[i]);
            //i+1 move to the next number in nums array
            generateSubset( i+1, nums, current, subsets);
            current.remove(current.size()-1);
        }
    }
}


https://www.youtube.com/watch?v=LdtQAYdYLcE