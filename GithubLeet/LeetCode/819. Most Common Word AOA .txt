Given a paragraph and a list of banned words, return the most frequent word that is not in the list of banned words. 
It is guaranteed there is at least one word that isn't banned, and that the answer is unique.
Words in the list of banned words are given in lowercase, and free of punctuation. 
 Words in the paragraph are not case sensitive.  The answer is in lowercase.

class Solution {
    public String mostCommonWord(String paragraph, String[] banned)
    {
        //things to do
        //keep track of banned words, put it in a hashset(lets us know in 01 time)
        //use a hashmap to count how many non banned words there are
        //then go through the paragraph
        //for every word in the paragraph look to see if its in the banned words and if not, map it to the hahmap
        //then return the String with the most common word
        HashSet<String> bannedW = new HashSet<>();
        //string w is string words
        for(String w : banned)
        {
            bannedW.add(w);
        }        
        HashMap<String,Integer> count = new HashMap<>(); 
        //only allows a-z, A-z and everything else will be a  space and split the words with a space
        for(String w : paragraph.replaceAll("[^a-zA-Z]", " ").toLowerCase().split(" "))
        {            //increment the count of the word by 1 if seen before, else initalize it into the map
            if(!bannedW.contains(w))
               count.put(w, count.getOrDefault(w,0)+1);
        }
        String result = "";
        //for every key in our hashmap count
        for(String key: count.keySet())
        {
               //if result is an emptry string(first iteration),  
            // if the key we are on occurs more than our last result, 
            //the new key is set to result
            if(result.equals("") || count.get(key) > count.get(result))
            {
                result = key;
            }
        }
        return result;
    }
}